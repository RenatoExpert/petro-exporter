#!/bin/perl
use warnings;
use strict;

#	Pegando o ultimo anelid
my $anelidfile = "./idcount";
my $previousid = 1;
open (IC, '<', $anelidfile) or die $!;
while (<IC>) {
	if ($_ =~ m/[0-9]/) {
		if($_ > $previousid) {
			$previousid = $_;
		}
	}
}
close (IC);

#	Nome da certificadora
my $empresa;
my $run_empresa		= 1;
#	Data do certificado
my $datacert; 
my $run_datacert	= 1;
my $datacertificado_value;
#	Altura util
my $vendo_altura;
my $altura_util;
my $run_altura_util	= 1;
#	Contando aneis
my $segunda_aba		= 0;
my $numeroaneis	= 0;
my $missing		= 0;
my $comecou		= 0;
my $run_contando_aneis	= 1;
#	Altura inicial (de cada anel)
my @alturas_iniciais;
while(<>){
	if ($run_empresa) {
		if ($_ =~ m/Empresa:,/) {
			$empresa = $_;
			$empresa =~ s/Empresa:,//;
			$empresa =~ s/\n//;
			$run_empresa = 0;
		}
	}
	if ($run_datacert) {
		if ($_ =~ m/Certificado:,/) {
			$datacert = $_ ;
			$datacert =~ s/Certificado:,//;
			$datacert =~ s/\n//;
			$run_datacert = 0;
			#	Tratando o timestamp de ano
			if ($datacert =~ m/\//) {
				my @listtemp = split /\//, $datacert;
				$datacertificado_value = $listtemp[1];
				my $vintao;
				if ($datacertificado_value !~ m/[0-9]{4}/) {
					$vintao = "20";
				} else {
					$vintao = "";
				}
				$datacertificado_value = ", '${vintao}${datacertificado_value}'";
			} else {
				$datacertificado_value = "";
			}
		}
	}
	if ($run_altura_util) {
		# Ele começa a olhar as alturas depois de encontrar a palavra Altura NA PRIMEIRA ABA!!
		if ($_ =~ m/Altura/) {	
			$vendo_altura = 1;
		} elsif ($vendo_altura) {
			# Sabemos que a sessão acaba quando aparece qualquer linha NAO começada com um numero
			if ($_ =~ m/^[0-9]/) {			
				$altura_util = $_;
			} else {
				my @firstfield = split /,/, $altura_util;
				$altura_util = $firstfield[0];
				$run_altura_util = 0;
			}
		}
	}
	if ($run_contando_aneis) {
		# Ele começa a olhar as alturas depois de encontrar a palavra Altura NA SEGUNDA ABA!!
		if ($_ =~ m/Faixas de Arqueação/) {	
			$segunda_aba = 1;
		} elsif ($comecou) {
			if ($_ =~ m/Faixa de/) {			
				$numeroaneis++;
				$missing = 0;
			} elsif ($_ =~ m/^[0-9]/) {
				$missing = 0;
			} elsif ($missing) {
				$run_contando_aneis = 0;
			} else {
				$missing++;
				$comecou = 0;
			}
		} elsif ($segunda_aba) {
			if ($_ =~ m/Faixa de/) {			
				$numeroaneis++;
				$comecou++;
				my $let_faixa = $_;
				push @alturas_iniciais, $let_faixa;
			}
		}
	}
}
print @alturas_iniciais;

#	Defining anelid's
my $anelcountdown = $numeroaneis;
my $executionturn = 1;
my $anelid_columns;
my $anelid_values;
while ($anelcountdown) {
	if ($anelcountdown) {
		my $let_counter = 1+$numeroaneis-$anelcountdown;
		$anelid_columns .= ", anelid${let_counter}";
		$previousid++;
		$anelid_values .= ", '${previousid}'";
	} else {
		last;
	}
	$anelcountdown--;
}

#	Saving last anelid
open (IW, '>', $anelidfile);
print IW "$previousid";
close(IW);

#	Data certificado
my $datacertificado_column;
if ($datacertificado_value) {
	$datacertificado_column = ", datacertificado";
} else {
	$datacertificado_column = "";
}

#	Generating SQL syntax
my $sqlfile	= './inserts.sql';
open (SQLF, '>>', $sqlfile);
my $command = "INSERT INTO arqueacoes (certarqueacao${datacertificado_column}, alturautil, numeroaneis${anelid_columns}) VALUES ('${empresa}${datacert}'${datacertificado_value}, '${altura_util}', '${numeroaneis}'${anelid_values});\n";
print SQLF $command or die($!);
close(SQLF);
